{"0": {
    "doc": "📆 Calendar",
    "title": "📆 Calendar",
    "content": "Weekday office hours will be held in the HDSI Building in Room 155. Saturday office hours will be held in the CSE Building in Room 3109. ",
    "url": "/calendar/",
    "relUrl": "/calendar/"
  },"1": {
    "doc": "🐞 Debugging",
    "title": "🐞 Debugging",
    "content": " ",
    "url": "/debugging/",
    "relUrl": "/debugging/"
  },"2": {
    "doc": "🐞 Debugging",
    "title": "Table of contents",
    "content": ". | Cells and the Autograder . | Why does running a particular cell cause my kernel to die? | How do I quickly run all the cells in a notebook? | Why does grader.check_all() fail, if all previous tests passed? | Why does a notebook test fail now, when it passed before and I didn’t change my code? | Why did a Gradescope test fail, when all the notebook’s tests passed? | Why do I get an error saying grader is not defined? | I’m positive I have the right answer, but the test fails. Is there a mistake in the test? | I accidentally deleted something in a cell that was provided to me – how do I get it back? | I accidentally added something to the grader.check cell in a notebook and I can’t delete it – how do I fix it? | When I upload my assignment notebook to Gradescope, it says “Otter encountered an error while grading this submission: No gradeable files found in submission” | . | Specific Errors . | isinstance(..., numbers.Integral) | ... object is not callable | No module named 'babypandas' | Other errors | . | DataHub . | When I click a link on the course website, I see a black screen with text and a red error bar that says “Error: undefined.” What should I do? | When I click a link on the course website, I see a black screen with text and a red error bar. What should I do? | Why can’t I log in to DataHub? | How can Extension Students access DataHub? | My notebook won’t load. Is DataHub down? | What if I don’t have access to DataHub and I still want to access DSC 10 materials? | . | . ",
    "url": "/debugging/#table-of-contents",
    "relUrl": "/debugging/#table-of-contents"
  },"3": {
    "doc": "🐞 Debugging",
    "title": "Cells and the Autograder",
    "content": "Why does running a particular cell cause my kernel to die? . If one particular cell seems to cause your kernel to die, your code is probably incorrect in a way that is causing the computer to use more memory than it has available. For instance: your code is trying to create a gigantic array. To prevent from crashing the entire server, the kernel will “die”. This is an indication that there is a mistake in your code that you need to fix. How do I quickly run all the cells in a notebook? . Go to the Cell menu in the top toolbar, then “Run All.” You can also select a certain cell and run all cells before this point, or run all cells after this point. You should run all the cells in your notebook before submitting to confirm that you pass all the tests. Why does grader.check_all() fail, if all previous tests passed? . This can happen if you “overwrite” a variable that is used in a question. For instance, if Question 1 asks you to store your answer in a variable named stat, and later on in the notebook you change the value of stat, you’ll see the test after Question 1 pass, but the test at the end of the notebook fail. Make sure to avoid using the same variable name for more than one purpose. Why does a notebook test fail now, when it passed before and I didn’t change my code? . You probably ran your notebook out of order. Re-run all previous cells in order, which is how your code will be graded. Why did a Gradescope test fail, when all the notebook’s tests passed? . This can happen if you’re running your notebook’s cells out-of-order. The autograder runs your notebook top-to-bottom. If you’re defining a variable at the bottom of your notebook and using it at the top, the Gradescope autograder will fail because it doesn’t recognize the variable when it encounters it. This is why we recommend running Kernel -&gt; Restart and Run All: it “forgets” all of the variables and runs the notebook from top-to-bottom, just like the Gradescope autograder will. This will highlight any issues. Find the first cell that raises an error. Make sure that all of the variables used in that cell have been defined above that cell, and not below. Why do I get an error saying grader is not defined? . If it has been a while since you’ve worked on an assignment, the kernel will shut itself down to preserve memory. When this happens, all of your variables are forgotten, including the grader. That’s OK: you’ll just need to re-run all of the cells. The easiest way to do this is by using Kernel -&gt; Restart and Run All. I’m positive I have the right answer, but the test fails. Is there a mistake in the test? . While you might see the correct answer displayed as the result of the cell, chances are it isn’t being stored in the answer variable. Make sure you are assigning the result to the answer variable. Make sure there are no typos in the variable name. I accidentally deleted something in a cell that was provided to me – how do I get it back? . There are two solutions: . | In this public GitHub repository, you’ll find the “original” versions of all assignments we released this quarter. You can look here and manually add back any necessary code or text that you accidentally deleted. | Suppose you’re working on Lab 5. One solution is go directly to DataHub and rename your lab05 folder to something else, like lab05-old. Then, click the Lab 5 link on the course website again, and it’ll bring you to a brand-new version of Lab 5. Then, you can copy your work from your old Lab 5 to this new one, which should have everything in it. | . I accidentally added something to the grader.check cell in a notebook and I can’t delete it – how do I fix it? . One option is to follow option 2 above, where you rename your assignment folder to something else and click the DataHub link on the course website once again. But, that solution requires you to manually copy and paste your code from your old notebook to your new notebook. There’s another more direct solution – watch this 🎥 video to see how to do it. When I upload my assignment notebook to Gradescope, it says “Otter encountered an error while grading this submission: No gradeable files found in submission” . The most common way this happens is if you (unknowingly) download your notebook as a .json file rather than a .ipynb file. This often happens by default when working on an iPad. One solution, which is also discussed starting at 20:05 in this 🎥 video, is to download your notebook as follows: . | Make sure you’ve restarted your kernel and run all cells in your notebook. Save your notebook. | Click the “JupyterHub” button in the top left corner of the page. | In the file explorer that appears, click dsc10-2023-fa, then navigate to the folder that contains the file you’re trying to download. If you’re working on Homework 3, for instance, you’ll click homeworks and then hw03. | Click the square checkbox to the left of your assignment notebook (e.g. hw03.ipynb). Click “Shutdown” at the top. Then, click the checkbox again and click “Download”. This should download your notebook as a .ipynb file. | . ",
    "url": "/debugging/#cells-and-the-autograder",
    "relUrl": "/debugging/#cells-and-the-autograder"
  },"4": {
    "doc": "🐞 Debugging",
    "title": "Specific Errors",
    "content": "A general rule of thumb when debugging is to look at the very last line of an error message. That’s usually the most informative part of the message, and will often tell you directly what’s wrong. isinstance(..., numbers.Integral) . This error is telling you that the answer should be an integer, but your answer is not. This often happens when you’ve done some intermediate work towards the answer and saved an intermediate result in the answer variable instead of the final result. Sometimes instead of isinstance(..., numbers.Integral), you’ll see something like isinstance(..., bpd.DataFrame). This is saying that the answer should be a DataFrame, but yours was something else. The rest of the above still applies. Check the type of your answer variable with type(). Is it what you expected? ... object is not callable . This often happens when you use a default keyword (like str or list) as a variable name, for instance list = [1, 2, 3]. These errors can be tricky because they don’t error on their own, but cause problems when we try to use the name list (for example) later on in the notebook. To fix the issue, identify any such lines of code, change your variable names to be something else, and restart your notebook. Python keywords like str and list appear in green text, so be on the lookout if any of your variable names appear in green! . No module named 'babypandas' . This can happen if you click the name of a course other than DSC 10 when logging into DataHub. Here’s how to “switch” your DataHub to DSC 10 mode: . | Click “Control Panel” in the top right. | Click “Services”, then click “manual-resetter”. | Click “Reset” (if a pop-up box appears, click okay). | Log back into DataHub and it should allow you to select a course again – select DSC 10. | . Other errors . It can be difficult to decipher the meaning of error messages in Python. Here is a useful guide. You can also ask in office hours, or on Ed, provided you are not posting your code publicly or otherwise giving away the answer in your post. Understanding cryptic error messages is a skill that comes with experience. ",
    "url": "/debugging/#specific-errors",
    "relUrl": "/debugging/#specific-errors"
  },"5": {
    "doc": "🐞 Debugging",
    "title": "DataHub",
    "content": "When I click a link on the course website, I see a black screen with text and a red error bar that says “Error: undefined.” What should I do? . This often happens when clicking multiple assignment or lecture links quickly. Close all of the Jupyter Notebooks you have open, and click links on the course website one at a time. Once one notebook fully loads, click the next link. This error can also occur if you’re using an unsupported internet browser. Make sure you’re using either Chrome, Firefox, or Safari to access DataHub. If you’ve already worked on an assignment and then start seeing this error, try going directly to DataHub (datahub.ucsd.edu) to continue working on your assignment. If all else fails, this issue usually resolves itself with time, so try again in a few hours. When I click a link on the course website, I see a black screen with text and a red error bar. What should I do? . This is usually what’s called a “merge conflict”, which means that DataHub wasn’t able to combine the versions of the assignments we released with the versions you worked on. This should only happen in rare circumstances. 🚨 Warning! There are several errors that look similar to the image above, but before proceeding carefully read the error message to ensure that it contains the phrase “Your local changes to the following files would be overwritten by merge”. If this is not present in the error message, contact us on Ed with a screenshot. If you do see the above phrase, continue with the steps below. | Go directly to DataHub (datahub.ucsd.edu). You should be taken to a “File Manager” view which lists the folders available in your account. | On the upper right of the page, click the dropdown menu that says “New” and select “Terminal”. | In the terminal, type cd dsc10-2023-fa, then hit the enter key to run it. The command will not display anything. | Still in the terminal, type git stash, at which point your terminal window should look like the one below. Then, hit enter to run the command. You should see some output. | Finally, go back to dsc10.com and click the link to the assignment you were attempting to work on. It should now load without error. If you still see an error, make a post on Ed with a screenshot of the error you see now. | . Why can’t I log in to DataHub? . Log out of all Google accounts or open an incognito window. When prompted, enter your full UCSD email, username@ucsd.edu, as your credentials. How can Extension Students access DataHub? . Extension students may receive separate accounts for the purpose of accessing DataHub. To look up your account information and reset any additional account passwords, visit this website and enter your AX account in the username field and your UID in the Student ID field (e.g. “axNNNN”, “cs120sp20aa”, etc.) . My notebook won’t load. Is DataHub down? . Sometimes DataHub does have availability issues. Usually it is back up and running again within an hour. In other instances, there are some things you can do to get the notebook running again: Make sure your internet connection is working. If you can, restart your server by clicking the button at the top right labeled “Control Panel”, then select “Stop My Server”, followed by “Start My Server”. If that doesn’t work, try restarting your computer and using a different browser. Whenever you resume working on a notebook, run all cells you’ve previously completed. If your problem persists after trying all these steps, please notify us on Ed. What if I don’t have access to DataHub and I still want to access DSC 10 materials? . We welcome the general public to use our materials. If you’re not enrolled in the class, you can access all lectures and assignments in our public GitHub repository. ",
    "url": "/debugging/#datahub",
    "relUrl": "/debugging/#datahub"
  },"6": {
    "doc": "📈 Diagrams",
    "title": "📈 Diagrams",
    "content": "The interactive diagrams below are taken from lecture. Click on a diagram to “activate” it, then either click through it or use your arrow keys to navigate. If you’d like to see the diagram directly in Google Slides, click the “source” link. ",
    "url": "/diagrams/",
    "relUrl": "/diagrams/"
  },"7": {
    "doc": "📈 Diagrams",
    "title": "Table of contents",
    "content": ". | Nested Evaluation | Grouping | Binning and Histograms | Defining Functions | Merging | Bootstrapping | Confidence Intervals | The Central Limit Theorem | Permutation Testing – Shuffling | Permutation Testing – Summary | . Nested Evaluation . (source) . Grouping . (source) . Binning and Histograms . (source) . Defining Functions . (source) . Merging . (source) . Bootstrapping . (source) . Confidence Intervals . (source) . The Central Limit Theorem . (source) . Permutation Testing – Shuffling . (source) . Permutation Testing – Summary . (source) ",
    "url": "/diagrams/#table-of-contents",
    "relUrl": "/diagrams/#table-of-contents"
  },"8": {
    "doc": "🏠 Home",
    "title": "Principles of Data Science",
    "content": "DSC 10, Fall 2023 at UC San Diego . Rod Albuyeh . ralbuyeh@ucsd.edu Lecture(s): MWF 8-8:50AM (D), Peterson 104 . Suraj Rampure he/him . rampure@ucsd.edu Lecture(s): MWF 1-1:50PM (C), Mandeville B-210 . Janine Tiefenbruck she/her . jlobue@ucsd.edu Lecture(s): MWF 9-9:50AM (B), 10-10:50AM (A), Mandeville B-210 . Jump to the current week . Week 0 – Welcome to DSC 10! . Fri Sep 29 LEC 1 Introduction ✏️ . CIT 1.0-1.3 . SUR Welcome Survey . Week 1 – Python Basics . Mon Oct 2 LEC 2 Expressions and Data Types ✏️ . BPD 1-6 . Wed Oct 4 LEC 3 Strings, Lists, and Arrays ✏️ . BPD 7-8, CIT 14.1 . DIS 1 Getting Started with Jupyter Notebooks (problems) . Fri Oct 6 LEC 4 Arrays and DataFrames ✏️ . BPD 9-10 . Sat Oct 7 Lab 0 Expressions and Data Types . Week 2 – DataFrames and Visualization . Mon Oct 9 LEC 5 Querying and Grouping ✏️ . BPD 10-11 . Wed Oct 11 LEC 6 Grouping and Data Visualization ✏️ . CIT 7.0-7.1 . DIS 2 Arrays and DataFrames . QUIZ 1 Solutions . Thu Oct 12 Lab 1 Arrays and DataFrames . Fri Oct 13 LEC 7 Distributions and Histograms ✏️ . CIT 7.2, 7.3 . Sat Oct 14 HW 1 Basic Python, Arrays, and DataFrames . Week 3 – Functions and Control Flow . Mon Oct 16 LEC 8 Functions and Applying ✏️ . BPD 6, 12 . Wed Oct 18 LEC 9 Grouping on Multiple Columns, Merging ✏️ . BPD 11, 13 . DIS 3 Querying, Grouping, and Plotting . Thu Oct 19 Lab 2 Data Visualizations and Functions . Fri Oct 20 LEC 10 Conditional Statements and Iteration ✏️ . CIT 9.0-9.2 . Sat Oct 21 HW 2 DataFrames, Data Visualization, and Functions . Week 4 – Probability and Simulation . Mon Oct 23 LEC 11 Probability (annotated: 8AM • 1PM) . CIT 9.5 . Wed Oct 25 LEC 12 Simulation ✏️ . CIT 9.3-9.4 . DIS 4 DataFrames, Control Flow, and Probability . QUIZ 2 Solutions . Thu Oct 26 Lab 3 DataFrames, Control Flow, and Probability . Fri Oct 27 LEC 13 Midterm Review (annotated: 8AM • 9AM • 10AM • 1PM) . Sat Oct 28 HW 3 DataFrames, Control Flow, and Probability . Week 5 – Midterm Exam . Mon Oct 30 EXAM Midterm Exam (in registered lecture section) . Wed Nov 1 LEC 14 Distributions and Sampling ✏️ . CIT 10.0-10.4 . DIS 5 Midterm Exam Walkthrough . Fri Nov 3 LEC 15 Bootstrapping and Percentiles . CIT 13.0-13.2 . Week 6 – Confidence Intervals and the Normal Distribution . Mon Nov 6 LEC 16 Confidence Intervals . CIT 13.3-13.4 . PROJ Midterm Project: Taylor Swift (see partner guidelines) . Wed Nov 8 LEC 17 Variability and the Normal Distribution . CIT 14.2-14.3 . DIS 6 Bootstrapping and Confidence Intervals . Thu Nov 9 Lab 4 Simulation, Sampling, &amp; Bootstrapping . Fri Nov 10 No Lecture (Veterans Day 🎖️) . Sat Nov 11 HW 4 Simulation, Sampling, Bootstrapping . SUR Mid-Quarter Survey . Week 7 – Central Limit Theorem . Mon Nov 13 LEC 18 Central Limit Theorem . CIT 14.4-14.5 . Wed Nov 15 LEC 19 Central Limit Theorem, Sample Size . CIT 14.6 . DIS 7 Sampling and Bootstrapping . QUIZ 3 In Discussion, Covers Lectures 11-12 and 14-15 . Fri Nov 17 LEC 20 Models . CIT 11.1 . Sat Nov 18 Lab 5 Variability and the Normal Distribution . Week 8 – Hypothesis and Permutation Testing . Mon Nov 20 LEC 21 Hypothesis Testing . CIT 11.2-11.4 . Tue Nov 21 HW 5 The Normal Distribution and the Central Limit Theorem . Wed Nov 22 LEC 22 TVD, Permutation Testing . CIT 12.0-12.1 . DIS 8 Central Limit Theorem and Hypothesis Testing . Fri Nov 24 No Lecture (Thanksgiving 🦃) . Week 9 – Prediction . Mon Nov 27 LEC 23 Permutation Testing . CIT 12.3 . Lab 6 Hypothesis Testing . Wed Nov 29 LEC 24 Correlation . CIT 15.0-15.2 . DIS 9 Hypothesis Testing . QUIZ 4 In Discussion, Covers Lectures 16-22 . Fri Dec 1 LEC 25 Regression, Least Squares . CIT 15.2-15.4 . HW 6 Hypothesis Testing and Permutation Testing . Week 10 – Review . Mon Dec 4 LEC 26 Residuals &amp; Inference . CIT 15.5-16.3 . Tue Dec 5 PROJ Final Project (see partner guidelines) . Wed Dec 6 LEC 27 Review . DIS 10 Regression . Thu Dec 7 Lab 7 Regression . Fri Dec 8 LEC 28 Review, Conclusion . Sat Dec 9 EXAM Final Exam (7-10PM, location TBD) . SUR End-of-Quarter Survey and Evaluations (due 8AM) . ",
    "url": "/#principles-of-data-science",
    "relUrl": "/#principles-of-data-science"
  },"9": {
    "doc": "🏠 Home",
    "title": "🏠 Home",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"10": {
    "doc": "👯 Project Partner Guidelines",
    "title": "👯 Project Partner Guidelines",
    "content": " ",
    "url": "/project-partners/",
    "relUrl": "/project-partners/"
  },"11": {
    "doc": "👯 Project Partner Guidelines",
    "title": "Table of contents",
    "content": ". | Overview | Pair Programming | Choosing a Partner | Dealing with Differences | . ",
    "url": "/project-partners/#table-of-contents",
    "relUrl": "/project-partners/#table-of-contents"
  },"12": {
    "doc": "👯 Project Partner Guidelines",
    "title": "Overview",
    "content": "In this class, you are permitted to and encouraged to work with a partner for the Midterm Project and Final Project. Below, we provide suggestions for how to work with a partner, but ultimately it is up to you to work productively with your partner. If you work with a partner, you are both required to actively contribute to all parts of the project. | One way to do this is through the pair programming model, described below. | Another way to do this is to work on the same problems at the same time on your separate computers. | . In particular, you should not split up the project and each work on separate parts independently. You and your partner will receive the same score on any submissions you make together. Last quarter in DSC 10, grade data showed that students who worked together on projects got statistically significantly higher project grades than students who worked alone. ",
    "url": "/project-partners/#overview",
    "relUrl": "/project-partners/#overview"
  },"13": {
    "doc": "👯 Project Partner Guidelines",
    "title": "Pair Programming",
    "content": "Pair programming is a practice in which two programmers share one computer. One programmer is the “driver,” who controls the keyboard and mouse. The other is the “navigator,” who observes, asks questions, suggests solutions, and thinks about slightly longer-term strategies. The two programmers switch roles about every 20 minutes. What makes pair programming effective is that both programmers are working together on the same problem at the same time. Research shows that the resulting work of pair programming nearly always outshines that of the solitary programmer, with pairs producing better code in less time. To learn more about the practice of pair programming and to see pairs in action, check out this entertaining video from North Carolina State University: An Introduction to Pair Programming Version 2. ",
    "url": "/project-partners/#pair-programming",
    "relUrl": "/project-partners/#pair-programming"
  },"14": {
    "doc": "👯 Project Partner Guidelines",
    "title": "Choosing a Partner",
    "content": "You can choose your own partner. You will need to arrange times to meet outside of class. We expect everyone to be flexible and professional in arranging those times as necessary; if your schedule is highly constrained, explore possible meeting times with your prospective partner before you commit to the partnership. You should try to pick a partner whose experience and skill level with programming is similar to your own. This may not always be possible and it is sometimes hard to compare skill levels, but students tell us (and other data supports) that pairs are most productive when the partners start at about the same level. Still, people often pair up with another whose skills are different. This happens more often than not, as no two people have an identical skill set. The differences may be great or small, but this is exactly like most real-world working situations. Part of accomplishing a task is to get the most out of each member and make each member stronger and more productive on subsequent tasks. Students bring different strengths to the process, regardless of how much experience they have had with programming. Both experienced and inexperienced students will need to draw on their reasoning and problem solving skills. A more experienced partner may sometimes feel frustrated or slowed down by a less experienced partner, but the experienced partner still benefits from the teamwork in many ways. The less experienced partner’s requests for clarification often uncover flaws in an approach or solution; the exercise of providing a clear explanation solidifies and deepens the explainer’s own understanding and the teamwork and communication skills they gain have great value in both the academic realm and the job market. “My partner had never coded anything before so I was able to teach him a little bit about how it worked. The teaching bit helped me a lot withunderstanding the labs and passing the exams.” – student . The less experienced partner may feel that their questions hold the other partner back or that there is no benefit to participating actively, but pair programming studies show that paired work is consistently better than work the stronger partner does alone. It is each partner’s job to understand the whole task; that means asking questions when necessary and answering them when possible. ",
    "url": "/project-partners/#choosing-a-partner",
    "relUrl": "/project-partners/#choosing-a-partner"
  },"15": {
    "doc": "👯 Project Partner Guidelines",
    "title": "Dealing with Differences",
    "content": "If you are unhappy with your partnership (e.g., if your partner does not keep in touch, does not come prepared to work on the assignment, or does not seem to be engaged in the process), please first address your concerns to your partner, and try to agree on what should be done to make the partnership work well for both of you. If that approach is not successful, explain the issues to the instructors, who will work with you and your partner to improve the situation. If your differences cannot be resolved, or if your partner stops participating, you should mutually agree to separate and complete the rest of the project on your own (or with a new partner). You should never simply abandon your partner without coming to a mutual agreement that this is the best course of action. To encourage each student to pull their weight and be a good partner, you are free to change partners at any time. ",
    "url": "/project-partners/#dealing-with-differences",
    "relUrl": "/project-partners/#dealing-with-differences"
  },"16": {
    "doc": "📚 Resources",
    "title": "📚 Resources",
    "content": " ",
    "url": "/resources/",
    "relUrl": "/resources/"
  },"17": {
    "doc": "📚 Resources",
    "title": "Table of contents",
    "content": ". | Supplemental Resources . | Diagrams | Course-Specific Resources | Python Extra Practice | Probability Extra Practice | Permutation Testing Visualization | Instructional Videos | Lecture-Specific Videos | Review Videos | . | Practice Exams | UC San Diego Links | Other | . ",
    "url": "/resources/#table-of-contents",
    "relUrl": "/resources/#table-of-contents"
  },"18": {
    "doc": "📚 Resources",
    "title": "Supplemental Resources",
    "content": "Diagrams . We’ve compiled all of the interactive diagrams that are found in lecture, like the one below, and put them in a separate Diagrams page. Check it out! . Course-Specific Resources . These resources will directly complement the content from lectures and assignments in this course. Use them often! . | Textbook: Computational and Inferential Thinking | DSC 10 Reference Sheet (handy summary) | babypandas notes | babypandas Documentation | PandasTutor, a DataFrame visualization tool | . Python Extra Practice . If you’re looking for additional Python practice, these resources are generally helpful for Python learners, but are not specific to our course. Use them for futher explanations and practice exercises. | PythonTutor, a Python visualization tool | Software Carpentry | Code Academy | Coding Bat | Introduction to Computational Thinking with Data | . Probability Extra Practice . These are some additional resources to complement our lecture and assignments on probability. Use them for extra problem-solving practice. | Theory Meets Data, Chapters 1 and 2 | Khan Academy’s unit on Probability | . Permutation Testing Visualization . This article and visualization intuitively decribes permutation testing. It’s very helpful for thinking about how permutation testing works and why it is useful. | Permutation testing visualization | . Instructional Videos . These are some videos we made to address common questions of DSC 10 students. Definitely watch them! . | Navigating DataHub and Jupyter Notebooks | For Loops (and when not to use them) | . Lecture-Specific Videos . These are some videos we made to supplement a previous iteration of the course. They cover information that we’ll also cover this quarter. | Lottery Problem Walkthrough | Introduction to DataFrames | Grouping | Bar Charts and .str.contains . | .str.contains only | . | Line Plots and Sorting | . Review Videos . | For-loops | Functions and .apply | . ",
    "url": "/resources/#supplemental-resources",
    "relUrl": "/resources/#supplemental-resources"
  },"19": {
    "doc": "📚 Resources",
    "title": "Practice Exams",
    "content": "Past exams and detailed solutions can be found at practice.dsc10.com. Use this site to help you prepare for the midterm and final exam. ",
    "url": "/resources/#practice-exams",
    "relUrl": "/resources/#practice-exams"
  },"20": {
    "doc": "📚 Resources",
    "title": "UC San Diego Links",
    "content": ". | Data Science Undergraduate Program | DSC 10 Waitlist and Enrollment | Data Science Advising | Library Guide to Data and Statistics | Academic Integrity Homepage | Counseling and Psychological Services (CAPS) | . ",
    "url": "/resources/#uc-san-diego-links",
    "relUrl": "/resources/#uc-san-diego-links"
  },"21": {
    "doc": "📚 Resources",
    "title": "Other",
    "content": ". | Where to find datasets | . ",
    "url": "/resources/#other",
    "relUrl": "/resources/#other"
  },"22": {
    "doc": "👩‍🏫 Staff",
    "title": "👩‍🏫 Staff",
    "content": "Hover over an emoji to see a description. ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"23": {
    "doc": "👩‍🏫 Staff",
    "title": "Instructors",
    "content": "Rod Albuyeh . ralbuyeh@ucsd.edu Lecture(s): MWF 8-8:50AM (D), Peterson 104 . 🎓 PhD, Political Science, USC . 🏠 San Jose, CA . 🙋 Mixed martial arts, machine learning platforms and deployment, international politics, and retro gaming . 🍔 The Friendly, Hodad's, The Balboa, Rocky's . Suraj Rampure he/him . rampure@ucsd.edu Lecture(s): MWF 1-1:50PM (C), Mandeville B-210 . 🎓 MS, Electrical Engineering and Computer Sciences, UC Berkeley . 🏠 Windsor, Ontario, Canada . 🙋 Credit card points and traveling, my dog back home, the Lakers, future DSC courses, my academic journey, and this . 🥘 Menya Ultra, Tacos El Gordo, DJK, Charminar, Koon Thai, Bangkok Bay, SomiSomi . Janine Tiefenbruck she/her . jlobue@ucsd.edu Lecture(s): MWF 9-9:50AM (B), 10-10:50AM (A), Mandeville B-210 . 🎓 PhD, Mathematics, UCSD . 🏠 Wayne, NJ . 🙋 Math, baking, camping, games, and puzzles . 🥖 Wayfarer Bread &amp; Pastry, Bronx Pizza, Buona Forchetta, Taco Stand . ",
    "url": "/staff/#instructors",
    "relUrl": "/staff/#instructors"
  },"24": {
    "doc": "👩‍🏫 Staff",
    "title": "Course Staff",
    "content": "TA Arya Rahnama he/him . erahnama@ucsd.edu . 🎓 1st year, M.S. in Data Science . 🏠 Portland, OR . 🙋 Internships at Intel and Deloitte, SSBM, Counter Strike, chess (especially chess engines), and watching basketball . 🍦 Salt &amp; Straw, Kabob Lounge, Din Tai Fung . Tutor Oren Ciolli he/him . ociolli@ucsd.edu . 🎓 4th year, Data Science, Math-Econ, Revelle . 🏠 San Jose, CA . 🙋 Basketball, my internship at expedia, and cooking . 🍜 Raki Raki, Turmeric Thai Kitchen, Tacos El Gordo . Tutor Nate del Rosario he/him . nadelrosario@ucsd.edu . 🎓 3rd year, Data Science, Sixth . 🏠 San Francisco, CA . 🙋 First internship, living in Pasadena, Kdramas, playing music, weightlifting, clothes, and favorite places to travel . 🍮 Meet Fresh, Jomaru, Grandma’s Tofu, Hidden Fish . Tutor Jack Determan he/him . jodeterman@ucsd.edu . 🎓 2nd year, Math-Computer Science, ERC . 🏠 North Andover, MA . 🙋 Professional certification in web development through Harvard, soccer, piano, running, chess, and Ethics/Philosophy in Data Science/Statistics . 🍍 Duke's La Jolla . Tutor Sophia Fang she/her . sofang@ucsd.edu . 🎓 2nd year, Data Science, Sixth . 🏠 San Diego, CA . 🙋 Web design, webtoons, and baking . 🥟 Taste of Hunan, Tofu House, Little Sakana . Tutor Charlie Gillet he/him . cgillet@ucsd.edu . 🎓 3rd year, Data Science, Seventh . 🏠 Redwood City, CA . 🙋 Music, basketball, and dragon boat racing . 🍗 Bonchon, Spicy House, El Gordo Mexican Food . Tutor Ashley Ho she/her . a1ho@ucsd.edu . 🎓 4th year, Probability &amp; Statistics, Marshall . 🏠 Irvine, CA . 🙋 Cooking, movies/tv shows, and corgis . 🥡 Tasty Noodle House, Pho La Jolla, Monello . Tutor Chia-Chan Ho he/him . chh061@ucsd.edu . 🎓 4th year, International Business, Data Science Minor, Revelle . 🏠 Taichung, Taiwan . 🙋 Guitar, video games, and K-pop . 🍚 YinTang, Din Tai Fung, Haidilao . Tutor Vanessa Hu she/her . vhu@ucsd.edu . 🎓 3rd year, Data Science, Sixth . 🏠 San Jose, CA . 🙋 Baking and reading . 🍜 RAKIRAKI Ramen, Grandma Tofu, Izola . Tutor Leena Kang she/her . l1kang@ucsd.edu . 🎓 3rd year, Applied Mathematics, Sixth . 🏠 San Ramon, CA . 🙋 Pulling a perfect espresso shot, best ice cream spots, and baking french macarons . 🦐 Oscars, Menya Ultra . Tutor Norah Kerendian she/her . nokerendian@ucsd.edu . 🎓 2nd year, Math-Econ, Data Science Minor, Marshall . 🏠 Los Angeles, CA . 🙋 Reading, networking, and taekwondo . 🥐 Parisien Gourmandises . Tutor Anthony Li he/him . all010@ucsd.edu . 🎓 4th year, Data Science, Seventh . 🏠 San Ramon, CA . 🙋 The new Mortal Kombat game, new films coming out, and art . 🍱 CoCo Ichibanya, Tasty Noodle House . Tutor Weiyue Li he/him . wel019@ucsd.edu . 🎓 4th year, Data Science, Applied Mathematics, Economics, Warren . 🏠 Shenzhen, China . 🙋 My research about Multimodal LLM, my academic journey &amp; advice at UCSD, and my cat Emo 🐱 . 🥩 The Fire Spot, Barbusa, Woomiok . Tutor Jasmine Lo she/her . j2lo@ucsd.edu . 🎓 3rd year, Data Science, Sixth . 🏠 Fremont, CA . 🙋 Painting (tote bags), boba, books, and my research lab at the VA . 🐟 Blue Ocean, Tasty Noodle House, CoCo Ichibanya . Tutor Arjun Malleswaran he/him . amallesw@ucsd.edu . 🎓 4th year, Data Science, Sixth . 🏠 San Ramon, CA . 🙋 Basketball, volleyball, rock climbing, and hiking . 🍛 Charminar, RAKIRAKI Ramen . Tutor Mert Ozer he/him . mozer@ucsd.edu . 🎓 2nd year, Data Science, Warren . 🏠 Eskişehir, Türkiye . 🙋 Entrepreneurship, finance, and tennis . 🍛 Anywhere they don't judge me for asking for extra napkins! . Tutor Aaron Rasin he/him . arasin@ucsd.edu . 🎓 4th year, Linguistics, Seventh . 🏠 Newton, MA . 🙋 Linguistics at UCSD and the La Jolla Symphony . 🌮 Don Carlos Taco Shop, Main Chick . Tutor Chaninder Rishi he/him . crishi@ucsd.edu . 🎓 4th year, Data Science, Seventh . 🏠 Hayward, CA . 🙋 Internship at AT&amp;T, tennis, ping-pong, cooking new recipes, and TV shows (Seinfeld, Burn Notice, White Collar, 24) . 🥪 Ike's, Punjabi Tandoor, Thai Time 3 . Tutor Gina Roberg she/her . groberg@ucsd.edu . 🎓 3rd year, Data Science, Sixth . 🏠 San Diego, CA . 🙋 Film, acting, nail art, and crochet . 🦀 Crab Hut, Sizzling Pot King, Formoosa . Tutor Harshi Saha any pronouns . hsaha@ucsd.edu . 🎓 4th year, Bioinformatics, Muir . 🏠 Cupertino, CA . 🙋 My bioinformatics research, indoor plants, and city pop . 🍛 Chon Ju Jip, Star Anise Thai Cuisine, Yokohama Yakitori Koubou . Tutor Keenan Serrao he/him . kserrao@ucsd.edu . 🎓 2nd year, Data Science, Sixth . 🏠 Dallas, TX . 🙋 Formula 1, cars, music, and photography . 🍕 Dough Momma Pizzeria, Din Tai Fung, El Pescador . Tutor Abel Seyoum he/him . aseyoum@ucsd.edu . 🎓 4th year, Data Science, Warren . 🏠 San Diego, CA . 🙋 Surfing, soccer, basketball, and landing an internship . 🌮 Tacos El Gordo, Wings n Things, CoCo Ichibanya . Tutor Suhani Sharma she/her . sus009@ucsd.edu . 🎓 2nd year, Data Science, ERC . 🏠 Los Angeles, CA . 🙋 Mystery novels, Legend of Zelda, and my Spotify playlists . 🍛 Taste of the Himalayas, Spice and Rice Kitchen, Rigobertos Taco Shop . Tutor Yutian Shi she/her . yus029@ucsd.edu . 🎓 4th year, Data Science, Sixth . 🏠 Beijing, China . 🙋 Traditional Chinese art, photography, and food . 🍦 Yogurt World, Regents Pizzeria, BenGong's Tea . Tutor Ester Tsai she/her . etsai@ucsd.edu . 🎓 4th year, Data Science, Math Minor, Sixth . 🏠 Pleasanton, CA . 🙋 My internship at Amazon or Thermo Fisher Scientific, tennis, and Christian fellowship . 🥙 Cava, Tasty Noodle House, 85°C Bakery . Tutor Bill Li Wang he/him . blw002@ucsd.edu . 🎓 2nd year, Data Science, Seventh . 🏠 San Jose, CA . 🙋 Piano, reading, manga, and pen spinning . 🍟 McDonald's, Spicy City, Taco Stand . Tutor Ylesia Wu she/her . xw001@ucsd.edu . 🎓 3rd year, Data Science, ERC . 🏠 Beijing, China . 🙋 Chinese pop music, singing, and Genshin Impact . 🍥 The Noble Chef, Taste of Hunan, Mo-Mo-Paradise . Tutor Guoxuan Xu he/him . g7xu@ucsd.edu . 🎓 2nd year, Data Science, ERC . 🏠 Shanghai, China . 🙋 finding coffee shops, eating meat, and crafting . 🍖 Mongolian Hot Pot, Pho La Jolla, Ajisen Ramen . Tutor Diego Zavalza he/him . dzavalza@ucsd.edu . 🎓 4th year, Data Science, Marshall . 🏠 Oakland, CA . 🙋 Internship experiences, real estate, basketball, and cooking . 🌮 Tacos El Gordo, Phil's BBQ . Tutor Ciro Zhang he/him . ciz001@ucsd.edu . 🎓 2nd year, Data Science, Computer Engineering, ERC . 🏠 Richmond, BC, Canada . 🙋 Badminton, snowboarding, and chess . 🍟 Shake Shack . Mascot Baby Panda any pronouns . 🎓 2nd year, Data Science . 🏠 IKEA . 🙋 feasting on bamboo, cuddling, analyzing tabular data in Python . 🍚 Panda Express . ",
    "url": "/staff/#course-staff",
    "relUrl": "/staff/#course-staff"
  },"25": {
    "doc": "📖 Syllabus",
    "title": "📖 Syllabus",
    "content": " ",
    "url": "/syllabus/",
    "relUrl": "/syllabus/"
  },"26": {
    "doc": "📖 Syllabus",
    "title": "Table of contents",
    "content": ". | 🧐 About . | Acknowledgements | . | 👨‍🏫 Course Meetings . | Lecture | Discussion | Office Hours | . | 🚦 Getting Started . | Technology | Welcome Survey | Pretest | . | 💬 Communication | 📕 Readings | 🧪 Assignments . | Lab Assignments | Homework Assignments | Projects | Deadlines and Slip Days | Submission Errors | . | 📝 Assessments . | Exams | Quizzes | . | 📆 Weekly Schedule | 💯 Grades . | Regrade Requests | Letter Grades and Incompletes | . | 🤝 Academic Integrity Policies . | Why is academic integrity important? | What counts as cheating? | Use of Generative Artificial Intelligence | . | 🤗 Support . | Accomodations | Diversity and Inclusion | . | 🙋 Waitlist FAQs | . ",
    "url": "/syllabus/#table-of-contents",
    "relUrl": "/syllabus/#table-of-contents"
  },"27": {
    "doc": "📖 Syllabus",
    "title": "🧐 About",
    "content": "Welcome to DSC 10 at UC San Diego! This course aims to teach you how to draw conclusions about data. We will learn how to explore data and make predictions using data. Programming is a useful tool to help us analyze large datasets, and so we will learn how to program in Python towards this goal. We will learn some of the core techniques of data science, and we will practice applying them to real datasets from a variety of different disciplines. Prerequisites: None. This course is an introduction to data science with no prior background assumed beyond high school algebra. Make sure you are well-prepared by taking this pretest. If you are not planning on entering the DSC major/minor and have already taken a programming class and a statistics class, you may wish to take a more advanced course. If you are a DSC major/minor, DSC 10 is absolutely required, as later courses heavily reference its specific content. Acknowledgements . The contents of this course come from UC Berkeley’s Data 8 course, created by Ani Adhikari, John DeNero, and many others. This offering builds off of earlier offerings of DSC 10 by Justin Eldridge, Suraj Rampure, Janine Tiefenbruck, and many others. Thanks to all those who have a played a role in shaping this amazing course! . ",
    "url": "/syllabus/#-about",
    "relUrl": "/syllabus/#-about"
  },"28": {
    "doc": "📖 Syllabus",
    "title": "👨‍🏫 Course Meetings",
    "content": "Lecture . There are four lecture sections: . | Section A (Janine): MWF 10-10:50AM in Mandeville B-210 | Section B (Janine): MWF 9-9:50AM in Mandeville B-210 | Section C (Suraj): MWF 1-1:50PM in Mandeville B-210 | Section D (Rod): MWF 8-8:50AM in Peterson Hall 104 | . Lecture is meant to introduce you to the main concepts of the course. In-person attendance is never required, but is strongly encouraged when possible, as you’ll get the opportunity to ask questions, answer ungraded concept-check polls, and participate in discussion. You can attend any lecture section, but if space fills up, priority will be given to students officially enrolled in that section. For the Midterm Exam, you must attend the lecture section in which you are officially enrolled. Lectures will be podcasted (UCSD’s term for “recorded”). Podcast recordings will be available online at podcast.ucsd.edu within a few hours. Discussion . There are three discussion sections: . | Section A: Wednesday 3-3:50PM in Pepper Canyon Hall 109 | Section B: Wednesday 4-4:50PM in Pepper Canyon Hall 109 | Section C: Wednesday 5-5:50PM in Mandeville B-210 | . You must attend the discussion section that corresponds to the lecture section you are enrolled in. Students in Section D will be assigned to one of the other sections. On the Welcome Survey, you will be able to let us know of any conflicts with your assigned discussion section, and we will do our best to reassign you to a different section. In the Schedule of Classes, this course is listed as having both a discussion section (DI) and a lab section (LA), but we will only have one weekly meeting outside of lecture, which we’ll refer to as a discussion section, scheduled at the time listed above. You should ignore what you see as DI or LA on WebReg and just use the schedule above instead. Discussion section is focused on exam preparation. Students will work through problems from past DSC 10 exams and go over solutions with course staff. Attending discussion section and working through practice problems in discussion gives you direct experience with the types of questions you will see on the exams. We will also administer four quizzes throughout the quarter during discussion section, so it is important that you be able to attend in-person at your assigned time. Discussions will not be podcasted. The purpose of discussion is to give you hands-on problem-solving experience, so you really need to attend and participate to reap the benefits of discussion section. Office Hours . In order to provide you with help on assignments and concepts, the course staff will hold several office hours throughout the week, all of which will be held in-person. See the Calendar tab of the course website for the most up-to-date schedule and instructions. We use the term “office hours” but really, office hours are held in a common room where you can come to work on assignments, meet your classmates, and get help from course staff. We don’t bite and we would love to see you in office hours! . Office hours are your chance to ask for general help, clarification on assignments, and to review previous assignments. Our tutors have previously taken the class, done well, and been trained in how to help you. Course staff will not tell you if your answer is correct, and it is inappropriate to ask. Here are some really good questions to ask instead: . | I got confused about a concept in class. Can you explain it? | When the assignment says X, does it mean A or B? | My code is giving a weird error - can you help me understand why? | I can’t get this test to pass, so I must be doing something wrong. Can you help me figure it out? | My code is doing something different than what I expected. Can you explain what is happening? | . Questions that you should never ask a tutor: . | Is this the right answer? | Can you check my code and make sure it is right? | What is the answer? | What’s going to be on the exam? | . Your primary motivation when interacting with course staff should be learning. ",
    "url": "/syllabus/#-course-meetings",
    "relUrl": "/syllabus/#-course-meetings"
  },"29": {
    "doc": "📖 Syllabus",
    "title": "🚦 Getting Started",
    "content": "Technology . First and foremost, you will need access to a computer (or tablet with a keyboard) and a stable internet connection to participate in this course. UCSD has a Laptop Lending Program which may be helpful, but you should also contact us if you have any concerns about access to technology. Most students bring a computer to lecture, and a computer or tablet will be necessary to attend discussion section. All course content will be linked from this website, but there are a few additional platforms that you’ll need to access: . | Ed: We’ll be using Ed as our course message and discussion board. More details are in the Communication section below. If you didn’t already get an invitation, join here. | Gradescope: You’ll submit all assignments and exams to Gradescope. This is where all of your grades will live as well. If you didn’t already get an invitation to our Gradescope course, reach out to the instructional staff on Ed. | DataHub: Assignments in this course will involve programming in Python. DataHub (datahub.ucsd.edu) is UCSD’s online data science and machine learning platform, where you will work on assignments. We will show you how to use it in class. | . Make sure you can access all three sites ASAP. It’s a good idea to bookmark them, too (though they’re all linked at the top of this website). Note that we will not be using Canvas this quarter. Please do not contact the staff through Canvas – we won’t be able to read it! . Welcome Survey . Please fill out this short Welcome Survey at the start of the quarter. This is required of all students. Pretest . DSC 10’s only prerequisite is high school algebra. In order to gauge your preparedness for the type of math you’ll see in this class, you should work through the practice problems on this pretest. You will not submit this pretest, and it will not be graded, but it will help you identify any gaps in your background knowledge and it will teach you some useful test-taking skills. We’ll release solutions to the pretest on Monday of Week 1. ",
    "url": "/syllabus/#-getting-started",
    "relUrl": "/syllabus/#-getting-started"
  },"30": {
    "doc": "📖 Syllabus",
    "title": "💬 Communication",
    "content": "This quarter, we’ll be using Ed as our course message board. If you have a question about anything to do with the course — if you’re stuck on a problem, want clarification on the logistics, or just have a general question about data science — you can make a post on Ed. If your post includes any part of your solution to a problem (e.g. code), please make your post private; otherwise, please make your post public so that other students can benefit from the interaction. You can also post anonymously if you prefer. Course staff will regularly check Ed and try to answer any questions that you have. You’re also encouraged to answer a question asked by another student if you feel that you know the answer – this is a great way to strengthen your understanding of the material. Please use Ed instead of email, as this helps us keep all course-related communication in one place. In particular, don’t send course staff questions about course content over email/social media – Ed is the place for that. ",
    "url": "/syllabus/#-communication",
    "relUrl": "/syllabus/#-communication"
  },"31": {
    "doc": "📖 Syllabus",
    "title": "📕 Readings",
    "content": "Our readings will come from two free online sources. | Computational and Inferential Thinking (“CIT”) is the main textbook for the course, written to support UC Berkeley’s version of this course, from which DSC 10 was adapted. This book uses slightly different Python commands (it does not use the babypandas module), but the underlying concepts are the same. | Notes on (Baby)Pandas (“BPD”) are a set of notes about the babypandas module, written specifically for DSC 10 students. | . ",
    "url": "/syllabus/#-readings",
    "relUrl": "/syllabus/#-readings"
  },"32": {
    "doc": "📖 Syllabus",
    "title": "🧪 Assignments",
    "content": "Lab Assignments . Weekly lab assignments are a required part of the course and will help you develop fluency in Python and working with data. The labs are designed to help you build the skills you need to complete homework assignments and projects in a low-stress setting. As you complete the lab, you’ll be able to run a sequence of autograder tests, which check to make sure that your answers are correct. If you complete the assignment and all the tests pass, you’ll get a perfect score! . To submit a lab, follow the instructions in the assignment to upload your notebook to Gradescope, which will run automated tests and assign your score. You should verify that all of your test cases pass on Gradescope before the deadline. Lab assignments will usually be due on Thursdays at 11:59PM, though you should refer to the homepage of this website for the most up-to-date schedule. We will release lab assignments roughly a week before they’re due. Your lowest lab score is dropped from your grade calculation at the end of the quarter. Labs must be completed and submitted individually, but we encourage you to discuss high-level approaches with others. See the Collaboration Policy and Academic Integrity section for more details. Homework Assignments . Weekly homework assignments build off of the skills you have developed in labs. Homeworks will reinforce concepts from class, explore new ideas, and provide hands-on experience working with data. An important difference between labs and homeworks lies in the way autograder tests are run. Unlike the tests in the labs, the tests in the homework cannot be used to guarantee that you have the correct answers. The tests in the homework only check to make sure that your answer is appropriately formatted, not that it is correct. For example, if a homework question asks you to calculate a percent, the test in the homework might check that the answer you provide is a number between 0 and 100. You should make sure that all the tests pass before submitting your homework, but this will not guarantee a perfect score. After you submit your homework to Gradescope, and after the deadline for submissions has passed, a new set of hidden tests will be run to make sure that you have the correct answers. In the percent example above, the hidden test might check that your answer equals 56, for example. Your score for the assignment will be based on the results of the hidden tests, which won’t be available immediately after submission. So if you see a perfect score upon submission, this only means that you’ve passed the formatting tests, not the hidden correctness tests that determine your score. To submit a homework, follow the instructions in the assignment to upload your notebook to Gradescope. Homeworks will usually be due on Saturdays at 11:59PM, though you should refer to the homepage of this website for the most up-to-date schedule. We will release homework assignments roughly a week before they’re due. Your lowest homework score is dropped from your grade calculation at the end of the quarter. Like labs, homeworks must be completed and submitted individually, but we encourage you to discuss high-level approaches with others. See the Collaboration Policy and Academic Integrity section for more details. Projects . This class has two projects, a Midterm Project and a Final Project. Projects are like more challenging homeworks. They are longer than a typical homework, and they require you to pull together ideas from previous weeks, rather than just the last week. Projects also give you a chance to explore a dataset in-depth, which can be a lot of fun! . Project tests are like homework tests – the provided tests only check if your answers have the correct format, not if they are correct. You’ll only be able to see your score on the project after the deadline, once all projects are submitted and the hidden correctness tests have been run. Unlike labs and homeworks, you may work with a partner on projects. Your partner can be anyone else in either section of the course. If you choose to work with a partner, start by reading these project partner guidelines. If working with a partner, only one of you should submit the assignment, and you’ll be able to tag your partner in your Gradescope submission. Deadlines and Slip Days . Labs, homeworks, and projects must be submitted by 11:59PM on the due date to be considered on time. You may turn them in as many times as you like before the deadline, and only the most recent submission will be graded, so it’s a good habit to submit early and often. When submitting any assignment to Gradescope, make sure to stick around until you see a confirmation that all tests have passed. If the Gradescope autograder cannot grade your work or you see a message saying “Your submission timed out,” this indicates an error with your code, and it is your responsibility to identify and solve the problem before the deadline. It may take some time for Gradescope’s autograder to grade your submission. You are encouraged to submit with enough time to see the output of the autograder before the 11:59PM deadline, as it may alert you to a problem you need to fix. However, if you submit before 11:59PM and the autograder finishes running after 11:59PM, your assigment will still be considered on time. After submitting, check that you got a confirmation email from Gradescope to verify that your submission was successful. Save this email until you receive your grade on the assignment, in case of any issues with your submission. You are allotted six “slip days” to use throughout the quarter. A slip day extends the deadline of any one homework, lab, or project by 24 hours. You cannot turn in any assignments more than 48 hours late, meaning that you cannot use more than 2 slip days on any assignment. Slip days are designed to be a transparent and predictable source of leniency in deadlines. You can use a slip day if you are too busy to complete an assignment on its original due date. But slip days are also meant for things like the internet (or the DataHub server) going down at 11:58PM just as you go to submit your homework. Slip days are meant to be used in exceptional circumstances, so you probably should not need to use all six, but if you have something going on in your life that is impeding your ability to do your classwork on time, please reach out to us as soon as possible so we can work something out. Slip days are applied automatically at the end of the quarter, and you don’t need to ask in order to use one. It’s your responsibility to keep track of how many you have left. If you’ve run out of slip days and submit an assignment late, that assignment may still be graded, but you will receive a 0 on it when we calculate grades at the end of the quarter. However, in the event that you use all six days and submit another assignment late, we will allocate your slip days first to the Final Project and Midterm Project, then to your homeworks (in chronological order), and then to your labs (in chronological order). This is done to prevent you from receiving a 0 on, say, the Final Project, if you’ve used up all of your slip days at the end of the quarter; in such an example, you’d instead receive a 0 on an earlier assignment that isn’t weighted as much in your grade. If you submit the Midterm Project or Final Project late and are working with a partner, both you and your partner will have to use slip days. For example, if you submit the Midterm Project two days late, both you and your partner will lose two slip days. Submission Errors . It is your responsibility to ensure that your work is submitted correctly to Gradescope as a .ipynb file. Watch 20:05 and onwards of this video to see two ways of downloading Jupyter notebooks as a .ipynb file. When submitting your work, there are two potential errors to watch out for: . | Submitting your notebook in the wrong format, e.g. submitting as a .json or .txt file instead of a .ipynb file. If you do this, the Gradescope autograder will not be able to grade your work, and you will get a 0. This can almost certainly be avoided by watching the aforementioned video, and by waiting until you see confirmation from Gradescope that all tests have passed. | Submitting the wrong notebook, e.g. submitting your Lab 6 notebook to the Homework 6 assignment on Gradescope. This will also give you a 0, because the Gradescope autograder for a particular assignment can only grade your work for that assignment. To avoid this error, make sure to stick around on Gradescope after submission until you see that all tests have passed. | . To prevent these issues, it is important that you (1) double-check that you are submitting the right notebook in the right format to Gradescope, and (2) let the autograder run on Gradescope until it shows you under “Public Tests” that all public test cases passed. If you happen to make one of the above mistakes and you notice it yourself within 48 hours of the deadline, please resubmit your assignment. If it is more than 48 hours since the deadline, please reach out to a staff member and we may resubmit for you, which will cost you 2 slip days. It is your responsibility to ensure that all assignments are submitted correctly. ",
    "url": "/syllabus/#-assignments",
    "relUrl": "/syllabus/#-assignments"
  },"33": {
    "doc": "📖 Syllabus",
    "title": "📝 Assessments",
    "content": "We will assess your knowledge of course material frequently through quizzes and exams. Quizzes and exams will be administered on paper, without the use of computers or calculators. You’ll have access to a large collection of Practice Problems to help you prepare. You’ll see some of these problems in discussion section and during in-class exam reviews, but the more you practice, the better prepared you’ll be for the assessments. Exams . This class has one Midterm Exam and one Final Exam: . | Midterm Exam: Monday, October 30, during your registered lecture slot | Final Exam: Saturday, December 9, 7-10PM, location TBD | . Exams are cumulative, though the Final Exam will emphasize material after the Midterm Exam. Both exams will be held in-person and on-paper. If you have a conflict with either exam, you should let us know right away via the Welcome Survey to see if accomodations can be made. Without express permission otherwise, students are required to take both exams at the scheduled times. Quizzes . There are four quizzes throughout the quarter, administered in discussion section: . | Quiz 1: Wednesday, October 11 | Quiz 2: Wednesday, October 25 | Quiz 3: Wednesday, November 15 | Quiz 4: Wednesday, November 29 | . You must attend your assigned discussion section; see the Discussion section of the syllabus for details. Your lowest quiz score is dropped from your grade calculation at the end of the quarter. ",
    "url": "/syllabus/#-assessments",
    "relUrl": "/syllabus/#-assessments"
  },"34": {
    "doc": "📖 Syllabus",
    "title": "📆 Weekly Schedule",
    "content": "To summarize all of the events and deadlines, refer to this general weekly schedule. Note that there are significant changes to this schedule towards the end of the quarter due to holidays. Please refer to the homepage of this website for the most up-to-date schedule of deadlines. | Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | . |   | Lecture |   | Lecture and Discussion (with Quizzes) |   | Lecture |   | . |   |   |   |   | Lab due |   | Homework due | . ",
    "url": "/syllabus/#-weekly-schedule",
    "relUrl": "/syllabus/#-weekly-schedule"
  },"35": {
    "doc": "📖 Syllabus",
    "title": "💯 Grades",
    "content": "The table below shows how your mastery of class material will be assessed and how grades will be computed: . | Component | Weight | Notes | . | Lab Assignments | 10% | drop lowest score | . | Homework Assignments | 25% | 5% each, drop lowest score | . | Quizzes | 15% | 5% each, drop lowest score | . | Midterm Project | 10% |   | . | Midterm Exam | 10% |   | . | Final Project | 10% |   | . | Final Exam | 20% |   | . Note that all assignments in each category will be worth the same amount, regardless of the number of points they are graded out of. Regrade Requests . If you’d like to request a regrade on any assignment, you must do so within one week of the assignment being graded. If you think there is a problem with the autograder, please fill out the Autograder Regrade Request Form. If you think there is a problem with how your written question was graded, submit a regrade request through Gradescope. Letter Grades and Incompletes . We will use a standard scale for assigning letter grades: . | Letter Grade | A | A- | B+ | B | B- | C+ | C | C- | D | F | . | Percentage | 93+ | 90+ | 87+ | 83+ | 80+ | 77+ | 73+ | 70+ | 60+ | below 60 | . A+ grades are given at the instructor’s discretion. If you are taking the course P/NP, you will receive a grade of P if you meet the criteria for a C- grade, otherwise you will receive a grade of NP. If you have extenuating circumstances that prohibit your completion of coursework, you may be eligible for an Incomplete grade. If you are considering using this option, the best thing you can do is let us know right away, and we can help you decide if this is an appropriate course of action. If you have any doubt about your ability to perform satisfactorily in this course due to something outside of your control, please contact us as soon as possible so we can figure out a plan. ",
    "url": "/syllabus/#-grades",
    "relUrl": "/syllabus/#-grades"
  },"36": {
    "doc": "📖 Syllabus",
    "title": "🤝 Academic Integrity Policies",
    "content": "The basic rule for DSC 10 is: Work hard. Make use of the expertise of the staff to learn what you need to know to really do well in the course. Act with integrity, and don’t cheat. If you do cheat, we will enforce the UCSD Policy on Integrity of Scholarship. This means you will likely fail the course and the Dean of your college will put you on probation or suspend or dismiss you from UCSD. Students agree that by taking this course, their assignments will be submitted to third party software to help detect plagiarism. Why is academic integrity important? . Academic integrity is an issue that is pertinent to all students on campus. When students act unethically by copying someone’s work, taking an exam for someone else, plagiarizing, etc., these students are misrepresenting their academic abilities. This makes it impossible for instructors to give grades (and for the University to give degrees) that reflect student knowledge. This devalues the worth of a UCSD degree for all students, making it imperative for the campus as a whole to enforce that all members of this community are honest and ethical. We want your degree to be meaningful and we want you to be proud to call yourself a graduate of UCSD! . The UCSD Policy on Integrity of Scholarship and this syllabus list some of the standards by which you are expected to complete your academic work, but your good ethical judgment (or asking us for advice) is also expected as we cannot list every behavior that is unethical or not in the spirit of academic integrity. Ignorance of the rules will not excuse you from any violations. What counts as cheating? . In DSC 10, you can read books, surf the web, talk to your friends and the DSC 10 staff to get help understanding the concepts you need to know to complete your assignments. However, no other person should complete your work for you or write any of the code you submit in this course, with the exception of the work you do with a project partner. The following activities are considered cheating and are not allowed in DSC 10 (not an exhaustive list): . | Using or submitting code acquired from other individuals. | Posting your code online, including on Ed, unless privately to instructors only. | Having any other person complete any part of your assignment on your behalf. | Completing an assignment on behalf of someone else. | Providing code, exam questions, or solutions to any other student in the course. | Splitting up project questions with your project partner and each working on different questions. | Collaborating with others on quizzes or exams. | . The following activities are examples of appropriate collaboration and are allowed in DSC 10 (not an exhaustive list): . | Discussing the general approach to solving homework problems or projects. | Talking about problem-solving strategies or issues you ran into and how you solved them. | Discussing the answers to quizzes or exams once all students in all sections of the course have taken the assessment. | Using code provided in class or in any assigned readings or videos. | Google searching for documentation on Python or babypandas. | Working together with other students on assignments without copying or sharing answers. | Posting a question about your approach to a problem on Ed, without sharing your code. | . The best way to avoid problems is by using your best judgment and remembering to act with Honesty, Trust, Fairness, Respect, Responsibility, and Courage. Here are some suggestions for completing your work: . | Don’t look at or discuss the details of another student’s code for an assignment you are working on, and don’t let another student look at your code. | Don’t start with someone else’s code and make changes to it, or in any way share code with other students. | If you are talking to another student about an assignment, don’t take notes, and wait an hour afterward before you write any code. | . Use of Generative Artificial Intelligence . Generative Artificial Intelligence (GenAI) describes tools, such as ChatGPT and GitHub Copilot, that are trained to generate responses to user-defined prompts, or questions. The existence of such tools is a major milestone in machine learning, and an impressive application of data science in the real world. Our course policy on the use of GenAI tools for coursework is simple: you may use these tools to build an understanding of course material and to assist you on assignments, keeping in mind that no tool is a substitute for a strong understanding of course concepts. Be mindful of how you are using GenAI tools. These tools can be very useful to help you preview material before lecture, summarize material after lecture, explain concepts you didn’t understand, and explore how different concepts are related. “Explain it like I’m five” can be a helpful prompt to give you a basic understanding of new concepts before being exposed to them in lecture. Consolidating your knowledge after learning something new and relating it to other things you know is important for learning and retention. Unfortunately, GenAI tools are not a consistently reliable source of quality information. For example, we asked ChatGPT to tell us about the Central Limit Theorem, an idea we will learn about towards the end of the quarter. The answer we get back is actually quite good. Good answer, ChatGPT! However, we also asked ChatGPT to tell us about permutation testing, another idea from the second half of the quarter. The answer we got back was wrong in very subtle ways, though it might sound correct to someone learning about permutation testing for the first time. Thinking about why ChatGPT’s answer is wrong is a useful learning exercise. Not quite... As this example illustrates, be skeptical about anything you learn from GenAI tools. Because of how GenAI tools are trained, they are designed to provide answers that sound correct, not necessarily ones that are correct. A goal of your education is to develop an ability to identify and produce information that actually is correct and doesn’t just sound correct. Human supervision of GenAI tools is always necessary. In addition, proceed with caution when using tools to assist you with your assignments. DSC 10 is a foundational class for your study of data science; you need to master the skills and concepts of this course if you want to use data science effectively. Through quizzes and exams, you will be tested on your independent ability to apply course material to novel problems. Homeworks, labs, and projects are meant to prepare you for these assessments, so overreliance on GenAI for assignments will rob you of opportunities to learn and make it hard for you to perform well on assessments. If you do use GenAI to assist you on assignments, keep these guidelines in mind: . | Design your prompts carefully. Don’t just ask one question; ask a follow-up question based on the output to the first. To use these tools effectively, you need to engineer your prompts carefully. Here are some tips for crafting prompts. | Test the outputs. GenAI tools can and do make mistakes, and being able to verify the correctness of a proposed answer is an important skill for you to develop. Validate the output against course-provided references, or follow up with a search on Google or Stack Overflow. Remember that GenAI tools provide crowdsourced likely answers, not necessarily correct answers. | Don’t submit any code that you don’t understand, or that uses content not taught in this class. In this introductory course, we expose you to a limited set of Python tools that you can use to solve a wide range of problems. When you prompt a GenAI tool with a question from DSC 10, it will not be limited to our restricted toolkit, and may provide answers using much more complicated code. If you answer questions with out-of-scope content, you are not practicing the foundational skills that the course is meant to teach you. In addition, your code may not pass correctness tests that require your solution to use methods taught in the course. | . If your assignment submission includes any content generated by an AI tool, it should be cited to acknowledge the source of the material. At the end of each assignment, you will be provided with a space to explain and reflect on your use of GenAI tool(s). ",
    "url": "/syllabus/#-academic-integrity-policies",
    "relUrl": "/syllabus/#-academic-integrity-policies"
  },"37": {
    "doc": "📖 Syllabus",
    "title": "🤗 Support",
    "content": "Accomodations . From the Office for Students with Disabilities (OSD): . OSD works with students with documented disabilities to review documentation and determine reasonable accommodations. Disabilities can occur in these areas: psychological, psychiatric, learning, attention, chronic health, physical, vision, hearing, and acquired brain injuries, and may occur at any time during a student’s college career. We encourage you to contact the OSD as soon as you become aware of a condition that is disabling so that we can work with you. If you already have accommodations via OSD, make sure that we receive your Authorization for Accommodation (AFA) letter at the start of the quarter so that we can make arrangements for accommodations. The Data Science OSD Liaison can be reached at dscstudent@ucsd.edu. Diversity and Inclusion . We are committed to an inclusive learning environment that respects our diversity of perspectives, experiences, and identities. Our goal is to create a diverse and inclusive learning environment where all students feel comfortable and can thrive. If you have any suggestions as to how we could create a more inclusive setting, please let us know. We also expect that you, as a student in this course, will honor and respect your classmates, abiding by the UCSD Principles of Community. Please understand that others’ backgrounds, perspectives and experiences may be different than your own, and help us to build an environment where everyone is respected and feels comfortable. ",
    "url": "/syllabus/#-support",
    "relUrl": "/syllabus/#-support"
  },"38": {
    "doc": "📖 Syllabus",
    "title": "🙋 Waitlist FAQs",
    "content": "I am on the waitlist, but I really want to get into the course. Can you let me in? . Sorry, but instructors are not able to enroll students in classes. I am on the waitlist, so how can I keep up with the course? . Waitlisted to students may attend lecture and discussion, space-permitting, and can also watch podcast recordings. You can (and should) still submit assignments if you are on the waitlist. Waitlisted students should have access to DataHub to work on assignments. You may need to add yourself to some course tools; see the Getting Started section of the syllabus. What are my chances of getting off the waitlist? . The instructional staff is not equipped to answer this question. Many questions about enrollment are answered here. Please direct your questions about enrollment to DSC advising. You can send an email to dscstudent@ucsd.edu, send a message through the Virtual Advising Center, or stop by drop-in advising hours. In short, seats in the class open up when students drop the class, which can be hard to predict. I have been added to Gradescope, Ed, and other course tools. Does this mean I am off the waitlist? . No. Students on the waitlist were also added to all course tools, so they can complete assignments while they are on the waitlist. Check WebReg if you are not sure of your enrollment status. ",
    "url": "/syllabus/#-waitlist-faqs",
    "relUrl": "/syllabus/#-waitlist-faqs"
  }
}
